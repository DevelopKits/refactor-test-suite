diff --git a/RefactorTest/RenameCpp11.cpp b/RefactorTest/RenameCpp11.cpp
index 2c23b34..72209a0 100644
--- a/RefactorTest/RenameCpp11.cpp
+++ b/RefactorTest/RenameCpp11.cpp
@@ -1141,7 +1141,7 @@ void f44()
         X(std::string &&s) : m_s(s + " rvalue") {}
 
         // #TEST#: R454 Rename method s
-        const std::string &s() const & { return m_s; }
+        const std::string &Goink() const & { return m_s; }
         // #TEST#: R455 Rename method s
         std::string s() const && { return m_s + " rvalue"; }
 
@@ -1157,20 +1157,20 @@ void f44()
     };
     X x(std::string{"foo"});
     // #TEST#: R460 Rename method s
-    require_equal(std::string{"foo rvalue"}, x.s());
+    require_equal(std::string{"foo rvalue"}, x.Goink());
 
     const std::string ss{"meh"};
     X xx(ss);
-    require_equal(std::string{"meh lvalue"}, xx.s());
+    require_equal(std::string{"meh lvalue"}, xx.Goink());
 
     // #TEST#: R461 Rename method set
     x.set(std::string{"bar"});
-    require_equal(std::string{"bar rvalue"}, x.s());
+    require_equal(std::string{"bar rvalue"}, x.Goink());
 
     std::string s2{"meh"};
     // #TEST#: R462 Rename method set
     x.set(s2);
-    require_equal(std::string{"meh lvalue"}, x.s());
+    require_equal(std::string{"meh lvalue"}, x.Goink());
 
     // #TEST#: R463 Rename method s
     require_equal(std::string{"meh rvalue rvalue"}, X{std::string{"meh"}}.s());
